# Based on http://www.morphatic.com/2016/05/21/super-fast-secure-wordpress-install-on-digitalocean-with-nginx-php7-and-ubuntu-16-04-lts/
# And https://www.nginx.com/blog/websocket-nginx/

map $http_upgrade $connection_upgrade {
	default upgrade;
	'' close;
}

server {
	listen 80      default_server;
	listen [::]:80 default_server;
	return 301 https://$APP_SERVER$request_uri;
}

server {
	listen 443      ssl http2 default_server;
	listen [::]:443 ssl http2 default_server;

	#
	# SSL
	#
	ssl_certificate     /opt/ssl/ssl.pem;
	ssl_certificate_key /opt/ssl/ssl.key;

	# From https://cipherli.st/ and https://raymii.org/s/tutorials/Strong_SSL_Security_On_nginx.html
	ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
	ssl_prefer_server_ciphers on;
	ssl_ciphers "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH";
	ssl_ecdh_curve secp384r1;
	ssl_session_cache shared:SSL:10m;
	ssl_session_tickets off;
	# Disable SSL Stapling since we don’t have a certificate that includes our root certificate:
	# ssl_stapling on;
	# ssl_stapling_verify on;
	# Use Google’s DNS to resolve the SSL certificate chain:
	resolver 8.8.8.8 8.8.4.4 valid=300s;
	resolver_timeout 5s;
	add_header Strict-Transport-Security "max-age=63072000; includeSubdomains; preload";
	add_header X-Frame-Options SAMEORIGIN;
	# add_header X-Content-Type-Options nosniff; # Disable in case OTMM sends invalid MIME types for anything

	ssl_dhparam /opt/ssl/dhparam.pem;

	#
	# Nginx configuration
	#
	# Hide Nginx version
	server_tokens off;

	# Disable max body guards since we allow up to 10 gigs anyway
	client_max_body_size 0;


	#
	# Loading
	#
	# When OTMM is loading, don’t just show “502 Bad Gateway”
	error_page 502 /502.html;
	location = /502.html {
		root /usr/share/nginx/html;
		internal;
	}

	#
	# Redirect root to OTMM root
	#
	location = / {
		return 301 https://$APP_SERVER/otmm/ux-html/;
	}

	#
	# Proxy destinations
	#

	# Repository assets (videos)
	location ^~ /media-vault/repository/ {
		proxy_pass http://nginx-for-repository/;
	}

	# OpenText Directory Services
	location ^~ /otds-admin {
		proxy_pass http://opentext-directory-services:8080/otds-admin;
	}

	location ^~ /otdsws/login {
		# Login will also include a redirect URI in the query parameters; rewrite that too (https://blog.imaginea.com/modifying-query-parameters-nginx-in-reverse-proxy-mode/)
		if ($args ~* (.*)(http://opentext-media-management-core-app:11090)(.*)) {
			set $args $1https://$APP_SERVER$3;
		}

		# Login will also include a redirect URI in the query parameters; rewrite that too (https://blog.imaginea.com/modifying-query-parameters-nginx-in-reverse-proxy-mode/)
		if ($args ~* (.*)(http%3A%2F%2Fopentext-media-management-core-app%3A11090)(.*)) {
			set $args $1https%3A%2F%2F$APP_SERVER$3;
		}

		proxy_pass http://opentext-directory-services:8080;
	}

	location ^~ /otdsws {
		proxy_pass http://opentext-directory-services:8080/otdsws;
	}

	# Solr admin
	# location ^~ /solr {
	# 	proxy_pass http://solr:8983;
	# 	# See entrypoint.sh for the creation of .htpasswd:
	# 	auth_basic "Authorization Required";
	# 	auth_basic_user_file /etc/nginx/.htpasswd;
	# }

	# Maildev admin
	location ^~ /maildev/ {
		proxy_pass http://maildev/;
	}

	# Catchall: all other requests go to OTMM
	location / {
		proxy_pass http://opentext-media-management-core-app:11090;

		# Login will try to redirect to OTDS; make sure it uses the external hostname for the OTDS server
		proxy_redirect http://opentext-directory-services:8080 https://$APP_SERVER;
		# After successful authentication, for some reason OTMM tries to redirect to itself; make sure it redirects to the correct server
		proxy_redirect http://opentext-media-management-core-app:11090 https://$APP_SERVER;
	}
}
